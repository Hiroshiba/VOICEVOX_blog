---
import FontAwesomeIcon from "@/components/FontAwesomeIcon.astro";
import type { CharacterInfo } from "@/constants/type";
import { faCopy } from "@fortawesome/free-solid-svg-icons";

interface Props {
  callNames: readonly string[];
  characterInfo: CharacterInfo;
  additionalClass?: string;
}

const { callNames, characterInfo, additionalClass } = Astro.props;
---

<td class={additionalClass}>
  <div>
    {
      callNames.map((callName) => (
        <p
          data-voicevox-call-name={callName}
          style={{ outlineColor: characterInfo.color }}
          title={`クリックして呼称をコピー：「${callName}」`}
        >
          <span class="icon">
            {/* TODO: クリック直後は faCheck にしたい */}
            <FontAwesomeIcon
              icon={faCopy}
              style={{ color: characterInfo.color }}
            />
          </span>
          {callName}
        </p>
      ))
    }
  </div>
</td>

<script>
  // クリックしたときにクリップボードにコピー
  document.querySelectorAll(`[data-voicevox-call-name]`).forEach((elem) => {
    elem.addEventListener("click", () => {
      const callName = elem.getAttribute(`data-voicevox-call-name`);
      if (callName == undefined) throw new Error("callName is undefined");
      navigator.clipboard.writeText(callName);
    });
  });
</script>
