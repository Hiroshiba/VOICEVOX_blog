---
/**
 * 全てのページのベースになるレイアウト。
 * ヘッダーとフッターがある。
 */
import type { ImageMetadata } from "astro";

export interface Props {
  title: string;
  description: string;
  image?: string | ImageMetadata;
  imageAlt?: string;
  noindex?: boolean;
  children: unknown;
  defaultHideHeader?: boolean; // アクセスした直後にヘッダーを隠すか
  isDark?: boolean;
  isNemo?: boolean;
}

import { getImage } from "astro:assets";
import { ViewTransitions } from "astro:transitions";

import { SEO } from "astro-seo";
import { GA_TRACKING_ID } from "@constants";

import "@/styles/global.scss";
import "@/styles/bulma.scss";

import Header from "@/components/Header/index.astro";
import Footer from "@/components/Footer.astro";
import Modals from "@components/modal/Modals.astro";

const {
  title,
  description,
  image: _image,
  imageAlt,
  noindex,
  defaultHideHeader,
  isDark,
  isNemo,
} = Astro.props;

// imageとimageAltが片方だけ指定されている場合はエラーを出す
if ((_image == undefined) != (imageAlt == undefined)) {
  throw new Error("imageとimageAltが片方だけ指定されています");
}

const imageUrl = _image
  ? typeof _image === "string"
    ? String(new URL(_image, Astro.url))
    : (await getImage({ src: _image })).src // importされた画像を取得する
  : undefined;
const hasImage = imageUrl != undefined && imageAlt != undefined;
---

<html lang="ja" transition:animate="none">
  <head>
    <SEO
      title={title}
      charset="utf-8"
      description={description}
      canonical={String(new URL(Astro.url.pathname, Astro.site))}
      openGraph={hasImage
        ? {
            basic: {
              title,
              type: "website",
              image: imageUrl,
            },
            optional: {
              description,
            },
            image: {
              alt: imageAlt,
            },
          }
        : undefined}
      twitter={{
        card: hasImage ? "summary_large_image" : "summary",
        title,
        description,
        image: hasImage ? imageUrl : undefined,
        imageAlt: hasImage ? imageAlt : undefined,
      }}
      noindex={noindex}
      nofollow={noindex}
    />

    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <link rel="sitemap" href="/sitemap-index.xml" />

    {/* アイコン */}
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="manifest" href="/site.webmanifest" />

    {/* セキュリティ対策。というよりSEO対策。 */}
    {
      import.meta.env.PROD && (
        <>
          <meta
            http-equiv="Content-Security-Policy"
            content="default-src 'self'"
          />
          <meta
            http-equiv="Content-Security-Policy"
            content="upgrade-insecure-requests"
          />
          <meta http-equiv="Permissions-Policy" content="interest-cohort=()" />
          <meta http-equiv="X-FRAME-OPTIONS" content="DENY" />
        </>
      )
    }

    {/* Google Analytics */}
    <script
      type="text/partytown"
      src=`https://www.googletagmanager.com/gtag/js?id=${GA_TRACKING_ID}`
    ></script>
    <script type="text/partytown">
      if ((navigator.doNotTrack || window.doNotTrack) != "1") {
        window.dataLayer = window.dataLayer || [];
        function gtag(...args) {
          dataLayer.push(args);
        }
        gtag("js", new Date());
        gtag("config", `${GA_TRACKING_ID}`);
      }
    </script>

    <ViewTransitions />
  </head>
  <body class=`${isDark ? "has-background-black" : "has-background-white"}`>
    <Header defaultHide={defaultHideHeader} isDark={isDark} isNemo={isNemo} />

    <slot />

    <footer class={`footer appearance ${isDark ? "has-background-black" : ""}`}>
      <Footer isDark={isDark} />
    </footer>
    <div class="footer height-holder">
      {/* 空間を空けるために必要 */}
      <Footer isDark={isDark} />
    </div>

    <Modals />
  </body>
</html>

<style lang="scss" is:global>
  // ページの高さを最低でも画面の高さに合わせる
  html {
    height: -webkit-fill-available;
  }
  body {
    min-height: 100vh;
    min-height: -webkit-fill-available;
  }

  body {
    position: relative;
    overflow: hidden;

    .footer {
      // footerを最下部に固定するためのクラス
      &.appearance {
        position: absolute;
        bottom: 0;
        width: 100%;
      }
      &.height-holder {
        visibility: hidden;
      }
    }
  }
</style>
